// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  role      UserRole @default(PATIENT)
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  dateOfBirth DateTime?
  gender    Gender?
  emergencyContact String?
  emergencyPhone   String?
  insuranceProvider String?
  insuranceNumber  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointmentsAsPatient Appointment[] @relation("PatientAppointments")
  treatments            Treatment[]
  payments              Payment[]
  medicalRecords        MedicalRecord[]
  doctor                Doctor?
  reviews               DoctorReview[]

  @@map("users")
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  RECEPTIONIST
  PATIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Doctor-specific information
model Doctor {
  id            String  @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseNumber String  @unique
  specialties   String[]
  experience    Int     // years of experience
  education     String[]
  certifications String[]
  bio           String?
  rating        Float   @default(0)
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointments  Appointment[]
  treatments    Treatment[]
  schedules     DoctorSchedule[]
  reviews       DoctorReview[]

  @@map("doctors")
}

// Services offered by the dental clinic
model Service {
  id          String  @id @default(cuid())
  name        String
  description String?
  category    String
  duration    Int     // in minutes
  price       Decimal @db.Decimal(10, 2)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]
  treatments   Treatment[]

  @@map("services")
}

// Appointment scheduling
model Appointment {
  id        String            @id @default(cuid())
  patientId String
  doctorId  String
  serviceId String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  reason    String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  patient   User    @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  doctor    Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id])
  treatment Treatment?
  payment   Payment?

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Doctor availability schedule
model DoctorSchedule {
  id        String   @id @default(cuid())
  doctorId  String
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("doctor_schedules")
}

// Treatment records
model Treatment {
  id            String   @id @default(cuid())
  appointmentId String   @unique
  patientId     String
  doctorId      String
  serviceId     String
  diagnosis     String?
  treatmentPlan String?
  notes         String?
  followUpDate  DateTime?
  status        TreatmentStatus @default(IN_PROGRESS)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient       User        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor        Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id])
  medicalRecords MedicalRecord[]

  @@map("treatments")
}

enum TreatmentStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Medical records and history
model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  treatmentId String?
  type        RecordType
  title       String
  description String?
  filePath    String?  // For uploaded files
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient   User      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  treatment Treatment? @relation(fields: [treatmentId], references: [id], onDelete: SetNull)

  @@map("medical_records")
}

enum RecordType {
  XRAY
  PHOTO
  REPORT
  PRESCRIPTION
  NOTE
  OTHER
}

// Payment tracking
model Payment {
  id            String        @id @default(cuid())
  patientId     String
  appointmentId String?       @unique
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  notes         String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  patient     User        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  INSURANCE
  CHECK
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL
}

// Doctor reviews and ratings
model DoctorReview {
  id        String   @id @default(cuid())
  doctorId  String
  patientId String
  rating    Int      // 1-5
  comment   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctor  Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient User   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([doctorId, patientId])
  @@map("doctor_reviews")
}

// System settings and configuration
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   // STRING, NUMBER, BOOLEAN, JSON
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
